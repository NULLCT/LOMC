#!/usr/bin/env python3
# import math
# import numpy as np
from collections import deque

# from collections import defaultdict
# import bisect
# import itertools
# from collections import Counter
# from numba import njit
# from functools import lru_cache # memo @lru_cache
# from heapq import heapify, heappop, heappush, heappushpop
# from decimal import Decimal # memo DON'T USE PYPY
# import sys
# sys.setrecursionlimit(10**8)


# Generated by 2.4.0 https://github.com/kyuridenamida/atcoder-tools
# (tips: You use the default template now. You can remove this line by
# using your custom template)
def main():
    N, Q = map(int, input().split())
    T = [None] * N
    adj = [[] for _ in range(N)]
    for _ in range(N - 1):
        S = input().split()
        a = int(S[0]) - 1
        b = int(S[1]) - 1
        adj[a].append(b)
        adj[b].append(a)

    T[0] = True
    F = deque()
    F.append(0)
    while len(F) > 0:
        f = F.popleft()
        for r in adj[f]:
            if T[r] is not None:
                continue
            T[r] = not T[f]
            F.append(r)

    for _ in range(Q):
        S = input().split()
        a = int(S[0]) - 1
        b = int(S[1]) - 1
        if not T[a] ^ T[b]:
            print('Town')
        else:
            print('Road')


if __name__ == '__main__':
    main()
