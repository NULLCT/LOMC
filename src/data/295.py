#!/usr/bin/env python3
import sys
import queue

ROAD = "Road"
TOWN = "Town"


def solve(N: int, Q: int, A: "List[int]", B: "List[int]", C: "List[int]",
          D: "List[int]"):
    G = [[] for _ in range(N)]
    for i in range(N - 1):
        G[A[i] - 1].append(B[i] - 1)
        G[B[i] - 1].append(A[i] - 1)
    color = [-1 for _ in range(N)]
    color[0] = 0
    que = queue.Queue()
    que.put(0)
    while not que.empty():
        i = que.get()
        for j in G[i]:
            if color[j] == -1:
                color[j] = 1 - color[i]
                que.put(j)
    for i in range(Q):
        if color[C[i] - 1] == color[D[i] - 1]:
            print(TOWN)
        else:
            print(ROAD)


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    # Failed to predict input format
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))
    Q = int(next(tokens))
    A = []
    B = []
    C = []
    D = []
    for i in range(N - 1):
        A.append(int(next(tokens)))
        B.append(int(next(tokens)))
    for j in range(Q):
        C.append(int(next(tokens)))
        D.append(int(next(tokens)))
    solve(N, Q, A, B, C, D)


if __name__ == '__main__':
    main()
